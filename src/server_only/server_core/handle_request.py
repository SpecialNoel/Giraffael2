# handle_request.py

from server_only.handle_requests.handle_clear_history_request import handle_clear_history_request
from server_only.handle_requests.handle_display_history_request import handle_display_history_request
from server_only.handle_requests.handle_download_request import handle_download_request
from server_only.handle_requests.handle_ai_suggestion_request import handle_ai_suggestion_request
from server_only.handle_requests.handle_normal_msg import handle_normal_msg
from server_only.handle_requests.handle_upload_request import handle_upload_request

def handle_request(prefix, clientObj, msgContent, room, rooms,
                   roomCode, chunkSize, maxFileSize, 
                   extList, typePrefix, usingOpenAI):  
    if prefix == 0:
        # Received operation message
        print('Received operation message.')
        print(f'msgContent:{msgContent}\n')
    elif prefix == 1: 
        # Received normal message
        handle_normal_msg(clientObj, msgContent, room)
    elif prefix == 2:
        # Received file-upload request
        handle_upload_request(clientObj, roomCode, chunkSize, maxFileSize, extList)
    elif prefix == 3: 
        # Received file-download request
        handle_download_request(clientObj, room, roomCode,
                                msgContent, chunkSize, 
                                maxFileSize, extList)
    elif prefix == 4: 
        # Received display msg/file history request
        handle_display_history_request(clientObj, msgContent, room)
    elif prefix == 5: 
        # Received clear msg/file/all history request
        handle_clear_history_request(clientObj, msgContent, room)
    elif prefix == 6: 
        # Received message suggestions generated by OpenAI model request
        handle_ai_suggestion_request(clientObj, roomCode, usingOpenAI)
    else: 
        # Received invalid prefix
        print(f'Received invalid prefix: {typePrefix}.')
    return
