# handle_ai_suggestion.py

import re
from client_only.client_core.client_sender_thread_ops import recv_user_input
from general.file_transmission import display_rule
from general.message import rstrip_message, send_msg_with_prefix

def handle_ai_suggestion(client, msgContent):
    response = msgContent.decode()
    messages = extract_suggestions_from_response(response)
    print('Here are the message suggestions generated by AI model:')
    for i in range(len(messages)):
        print(f'{i+1}. {messages[i]}')
    print('\nCopy & Paste one of these suggestions to the chatroom, or')
    print('Type in anything else to send message / execute command.\n')
        
    '''
    # Note: Client cannot choose from the suggested messages since 
    #       there is a conflict between client send thread and receive thread
    
    print('\nType the number to choose the message you want to send, or')
    print('Type anything else to exit from this mode.\n')
    
    choice = rstrip_message(input()) # This input() conflicts with the input() in send_msg_to_server()
    while is_number(choice):
        choiceInt = int(choice) - 1
        if (choiceInt) < 0 or (choiceInt) >= len(messages):
            # choice is a number, but is not in bound
            print('Invalid choice. Please choose again.')
            choice = rstrip_message(input())
        else:
            # choice is a number, and is in bound
            # Send the message suggestion of choice to chatroom
            msg = messages[choiceInt]
            send_msg_with_prefix(client, msg, 1)
            break
    # choice is not a number
    display_rule()
    '''
    return
  
def extract_suggestions_from_response(response):
    return [match.group(1).strip().strip('"') for match
            in re.finditer(r'\d+\.\s+"(.*?)"', response, re.DOTALL)]
    
def is_number(s):
    try:
        float(s)
        return True  # It is a number
    except ValueError:
        return False  # It is not a number
    